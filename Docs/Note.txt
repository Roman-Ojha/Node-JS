*) Yarn:
    -> https://classic.yarnpkg.com/en/docs/cli/install
    -> yarn install
        -> to install all dependencies
    -> yarn add <package_name>
        -> to install package
    -> yarn start
        -> to start to project according to script on package.json
    -> yarn global add <package_name> 
        -> to install package globally
    -> yarn remove <package_name>
        -> to remove the package form the dependencies
    -> yarn add -D <package_name> (to add package as dev dependencies)
    -> yarn run (to list all script to run)


*) npm:
    -> npm install -g <package_name>
        -> to install package globally
    -> npm install --save-dev <package_name> (to install package as the dev dependencies)
    -> npm view <package_name> (to see about package)
    -> npm view <package_name> version (to see the version of that package)
    -> npm install <package_name>@<version_number> (to install spacific version of package)
    -> npm list <package_name> (to know the specific latest version of an installed package)
    -> Prefix a version number with a caret (^) or a tilde (~) to specify to install the latest minor or patch version, respectively. 
    -> npm i --package-lock-only (to get package-lock.json)
    -> npm cache clean â€“force (to remove npm cache)
    -> npm cache clean --force (if above clean cache don't work)
    -> npm cache verify (to see/verify cache clean or not)
    -> npm outdated (to see outdated packages in current working project)
    -> npm outdated -g (to see outdated packages globally)
    -> npm update <package_name> (to update specific package in current working project)
    -> npm update <package_name> -g (to update specific package globally)
    -> npm update (to update all outdated packages in current working project)
    
*) NVM-Windows: https://github.com/coreybutler/nvm-windows
    -> nvm list (list out all of the node version available)
    -> nvm install <version> (install new version into the system)
    -> nvm use <version> (use different node version)


*) ES6 Import:
    import name from 'module-name'

    *)Importing can be done in various ways:

        Importing an entire module: 
        import * as name from 'module-name'

        Import default export from a module:
        import name from 'module-name'

        Importing a single export from a module:
        import { name } from 'module-name'

        Importing multiple exports from a module:
        import { nameOne , nameTwo } from 'module-name'
        
        Importing a module for side effects only
        import './module-name'

*) Npm Vulnerability:
    -> npm audit
    -> npm audit fix (solving vulnerabilities by updating the package with in the allowed version range)
    -> npm audit fix --force (solving vulnerabilities by updating the package without in the allowed version range)
    -> If it says required manual review then:
        -> https://youtu.be/rXV6-eXB26s?t=420
        -> https://snyk.io/advisor/


*) NOTE Related To MongoDB
    -> mongoose.schema.method.noteFunction = function(){
            console.log(this.value);
            // here we will only be able to get the 'value' data if we hadn't filtered the value while query
    }
    -> const getRes = await userData.findOne({
        email: user.email
        },
        {
            value:0,
            // here we can see that we had filter the 'value' data, it means that now schema method will not be able to access this 'value' data
        })
    -> getRes.noteFunction();
